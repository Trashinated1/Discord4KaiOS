# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    if: "contains(github.event.head_commit.message, 'Release')"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.3.0
        with:
          node-version: v18
	    - name: Cache node modules
	      id: cache-nodemodules
	      uses: actions/cache@v2
	      env:
	        cache-name: cache-node-modules
	      with:
	        # caching node_modules
	        path: node_modules
	        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
	        restore-keys: |
	          ${{ runner.os }}-build-${{ env.cache-name }}-
	          ${{ runner.os }}-build-
	          ${{ runner.os }}-
	    - name: Install Dependencies
	      if: steps.cache-nodemodules.outputs.cache-hit != 'true'
	      run: npm ci
	    - name: Build
	      run: npm run build
      - name: Zip things and build OmniSD ZIP
        run: |
          cd dist/
          zip -r application.zip *
          echo {\"version\": 1, \"manifestURL\": \"https://github.com/cyan-2048/Discord4KaiOS/releases/latest/download/manifest.webapp\"} > metadata.json
          zip omnisd.zip metadata.json application.zip
          echo "console.log('app_version='+JSON.parse(require('fs').readFileSync('./manifest.webapp', 'utf-8')).version)" | node >> $GITHUB_ENV
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.app_version }}
          files: |
            dist/omnisd.zip
            dist/application.zip
            dist/manifest.webapp
      - name: discord webhook
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          APP_VERSION: ${{ env.app_version }}
        run: |
          curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\":\"\",\"username\":\"Update\",\"embeds\":[{\"title\":\"New version: **$APP_VERSION**\",\"description\":\"[Source Code](https://github.com/cyan-2048/Discord4KaiOS/archive/refs/tags/$APP_VERSION.zip)\\n\\n**Download**:\\n[OmniSD](https://github.com/cyan-2048/Discord4KaiOS/releases/download/$APP_VERSION/omnisd.zip)\\n[WebIDE](https://github.com/cyan-2048/Discord4KaiOS/releases/download/$APP_VERSION/application.zip)\\n[manifest.webapp](https://github.com/cyan-2048/Discord4KaiOS/releases/download/$APP_VERSION/manifest.webapp)\",\"author\":{\"name\":\"Discord4KaiOS\",\"url\":\"https://github.com/cyan-2048/Discord4KaiOS/\",\"icon_url\":\"https://raw.githubusercontent.com/cyan-2048/Discord4KaiOS/main/public/css/56px.png\"}}]}" $DISCORD_WEBHOOK_URL
